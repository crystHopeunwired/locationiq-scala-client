/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.Error
import org.openapitools.client.model.Location
import org.openapitools.client.model.Number
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class ReverseApi(
  val defBasePath: String = "https://eu1.locationiq.com/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ReverseApiAsyncHelper(client, config)

  /**
   * Reverse Geocoding
   * Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.
   *
   * @param lat Latitude of the location to generate an address for. 
   * @param lon Longitude of the location to generate an address for. 
   * @param format Format to geocode. Only JSON supported for SDKs 
   * @param normalizecity Normalizes village to city level data to city 
   * @param addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
   * @param acceptLanguage Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
   * @param namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
   * @param extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
   * @return Location
   */
  def reverse(lat: Number, lon: Number, format: String, normalizecity: Integer, addressdetails: Option[Integer] = Option(1), acceptLanguage: Option[String] = None, namedetails: Option[Integer] = None, extratags: Option[Integer] = None): Option[Location] = {
    val await = Try(Await.result(reverseAsync(lat, lon, format, normalizecity, addressdetails, acceptLanguage, namedetails, extratags), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Reverse Geocoding asynchronously
   * Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.
   *
   * @param lat Latitude of the location to generate an address for. 
   * @param lon Longitude of the location to generate an address for. 
   * @param format Format to geocode. Only JSON supported for SDKs 
   * @param normalizecity Normalizes village to city level data to city 
   * @param addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
   * @param acceptLanguage Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
   * @param namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
   * @param extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
   * @return Future(Location)
   */
  def reverseAsync(lat: Number, lon: Number, format: String, normalizecity: Integer, addressdetails: Option[Integer] = Option(1), acceptLanguage: Option[String] = None, namedetails: Option[Integer] = None, extratags: Option[Integer] = None): Future[Location] = {
      helper.reverse(lat, lon, format, normalizecity, addressdetails, acceptLanguage, namedetails, extratags)
  }

}

class ReverseApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def reverse(lat: Number,
    lon: Number,
    format: String,
    normalizecity: Integer,
    addressdetails: Option[Integer] = Option(1),
    acceptLanguage: Option[String] = None,
    namedetails: Option[Integer] = None,
    extratags: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Location]): Future[Location] = {
    // create path and map variables
    val path = (addFmt("/reverse.php"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (format == null) throw new Exception("Missing required parameter 'format' when calling ReverseApi->reverse")

    queryParams += "lat" -> lat.toString
    queryParams += "lon" -> lon.toString
    queryParams += "format" -> format.toString
    queryParams += "normalizecity" -> normalizecity.toString
    addressdetails match {
      case Some(param) => queryParams += "addressdetails" -> param.toString
      case _ => queryParams
    }
    acceptLanguage match {
      case Some(param) => queryParams += "accept-language" -> param.toString
      case _ => queryParams
    }
    namedetails match {
      case Some(param) => queryParams += "namedetails" -> param.toString
      case _ => queryParams
    }
    extratags match {
      case Some(param) => queryParams += "extratags" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
