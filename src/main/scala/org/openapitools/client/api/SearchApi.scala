/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.Error
import org.openapitools.client.model.Location
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class SearchApi(
  val defBasePath: String = "https://eu1.locationiq.com/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new SearchApiAsyncHelper(client, config)

  /**
   * Forward Geocoding
   * The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.
   *
   * @param q Address to geocode 
   * @param format Format to geocode. Only JSON supported for SDKs 
   * @param normalizecity For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. 
   * @param addressdetails Include a breakdown of the address into elements. Defaults to 0. (optional)
   * @param viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box.  (optional)
   * @param bounded Restrict the results to only items contained with the viewbox (optional)
   * @param limit Limit the number of returned results. Default is 10. (optional, default to 10)
   * @param acceptLanguage Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
   * @param countrycodes Limit search to a list of countries. (optional)
   * @param namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
   * @param dedupe Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to 1. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested. (optional)
   * @param extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
   * @param statecode Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0 (optional)
   * @return List[Location]
   */
  def search(q: String, format: String, normalizecity: Integer, addressdetails: Option[Integer] = None, viewbox: Option[String] = None, bounded: Option[Integer] = None, limit: Option[Integer] = Option(10), acceptLanguage: Option[String] = None, countrycodes: Option[String] = None, namedetails: Option[Integer] = None, dedupe: Option[Integer] = None, extratags: Option[Integer] = None, statecode: Option[Integer] = None): Option[List[Location]] = {
    val await = Try(Await.result(searchAsync(q, format, normalizecity, addressdetails, viewbox, bounded, limit, acceptLanguage, countrycodes, namedetails, dedupe, extratags, statecode), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Forward Geocoding asynchronously
   * The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.
   *
   * @param q Address to geocode 
   * @param format Format to geocode. Only JSON supported for SDKs 
   * @param normalizecity For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. 
   * @param addressdetails Include a breakdown of the address into elements. Defaults to 0. (optional)
   * @param viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box.  (optional)
   * @param bounded Restrict the results to only items contained with the viewbox (optional)
   * @param limit Limit the number of returned results. Default is 10. (optional, default to 10)
   * @param acceptLanguage Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
   * @param countrycodes Limit search to a list of countries. (optional)
   * @param namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
   * @param dedupe Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to 1. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested. (optional)
   * @param extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
   * @param statecode Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0 (optional)
   * @return Future(List[Location])
   */
  def searchAsync(q: String, format: String, normalizecity: Integer, addressdetails: Option[Integer] = None, viewbox: Option[String] = None, bounded: Option[Integer] = None, limit: Option[Integer] = Option(10), acceptLanguage: Option[String] = None, countrycodes: Option[String] = None, namedetails: Option[Integer] = None, dedupe: Option[Integer] = None, extratags: Option[Integer] = None, statecode: Option[Integer] = None): Future[List[Location]] = {
      helper.search(q, format, normalizecity, addressdetails, viewbox, bounded, limit, acceptLanguage, countrycodes, namedetails, dedupe, extratags, statecode)
  }

}

class SearchApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def search(q: String,
    format: String,
    normalizecity: Integer,
    addressdetails: Option[Integer] = None,
    viewbox: Option[String] = None,
    bounded: Option[Integer] = None,
    limit: Option[Integer] = Option(10),
    acceptLanguage: Option[String] = None,
    countrycodes: Option[String] = None,
    namedetails: Option[Integer] = None,
    dedupe: Option[Integer] = None,
    extratags: Option[Integer] = None,
    statecode: Option[Integer] = None
    )(implicit reader: ClientResponseReader[List[Location]]): Future[List[Location]] = {
    // create path and map variables
    val path = (addFmt("/search.php"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (q == null) throw new Exception("Missing required parameter 'q' when calling SearchApi->search")

    if (format == null) throw new Exception("Missing required parameter 'format' when calling SearchApi->search")

    queryParams += "q" -> q.toString
    queryParams += "format" -> format.toString
    queryParams += "normalizecity" -> normalizecity.toString
    addressdetails match {
      case Some(param) => queryParams += "addressdetails" -> param.toString
      case _ => queryParams
    }
    viewbox match {
      case Some(param) => queryParams += "viewbox" -> param.toString
      case _ => queryParams
    }
    bounded match {
      case Some(param) => queryParams += "bounded" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    acceptLanguage match {
      case Some(param) => queryParams += "accept-language" -> param.toString
      case _ => queryParams
    }
    countrycodes match {
      case Some(param) => queryParams += "countrycodes" -> param.toString
      case _ => queryParams
    }
    namedetails match {
      case Some(param) => queryParams += "namedetails" -> param.toString
      case _ => queryParams
    }
    dedupe match {
      case Some(param) => queryParams += "dedupe" -> param.toString
      case _ => queryParams
    }
    extratags match {
      case Some(param) => queryParams += "extratags" -> param.toString
      case _ => queryParams
    }
    statecode match {
      case Some(param) => queryParams += "statecode" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
